export declare type TwClasses = string | TwClasses[];
export declare type ParsedTwClass = [string, string[]];
/**
 * Takes a separator string (e.g. ":") as parameter and returns a composer function.
 * The composer function will return a Array of tailwind classes.
 * Docs + example: https://github.com/Arthie/tailwindcssinjs/tree/master/packages/class-composer#1-twclassescomposer
 */
export declare function twClassesComposer(separator: string): (...twClasses: TwClasses[]) => string[];
/**
 * Takes a separator string (e.g. ":") as parameter and returns a composer function.
 * The composer function will return an array of class and variants tuples.
 * Docs + example: https://github.com/Arthie/tailwindcssinjs/tree/master/packages/class-composer#2-twclassesvariantsparser
 */
export declare function twClassesParser(separator: string): (...twClasses: TwClasses[]) => ParsedTwClass[];
/**
 * Takes a separator string (e.g. ":") as parameter and returns a composer function.
 * The composer function takes an array of parsed tailwind classes and return an Array of tailwind classes.
 */
export declare function twClassesGenerator(separator: string): (parsedTwClasses: ParsedTwClass[]) => string[];
/**
 * Takes a separator string (e.g. ":") as parameter and returns a composer function.
 * The composer function will return a tailwind classes string
 * Docs + example: https://github.com/Arthie/tailwindcssinjs/tree/master/packages/class-composer#3-twclassesserializer
 */
export declare function twClassesSerializer(separator: string): (...twClasses: TwClasses[]) => string;
export default function (separator: string, variants?: string[]): {
    composer: (...twClasses: TwClasses[]) => string[];
    parser: (...twClasses: TwClasses[]) => ParsedTwClass[];
    serializer: (...twClasses: TwClasses[]) => string;
    generator: (parsedTwClasses: ParsedTwClass[]) => string[];
};
//# sourceMappingURL=classComposer.d.ts.map