"use strict";
//Todo:
// - improve types and babel import
// - make more generic => have a banned plugin list
// - perf: check first if file has already been generated to avoid multiple transforms.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateDevCorePlugins = void 0;
const fs_1 = __importDefault(require("fs"));
const babel = __importStar(require("@babel/core"));
/**
 * Generates/transforms the tailwindcss corePlugins file (https://github.com/tailwindcss/tailwindcss/blob/master/src/corePlugins.js)
 * It removes the preflight plugin and changes the imports.
 * The preflight plugin is not needed and doesn't work with hot reloading
 * because it uses fs module wich is not available.
 */
function generateDevCorePlugins() {
    //get the original corePlugins file
    const pluginPath = require.resolve("tailwindcss/lib/plugins");
    const code = fs_1.default.readFileSync(pluginPath, "utf8");
    const output = babel.transformSync(code, {
        filename: "devCorePlugins.js",
        plugins: [
            function myCustomPlugin() {
                return {
                    visitor: {
                        StringLiteral(path) {
                            const name = path.node.value;
                            if (name.startsWith("./")) {
                                const replacement = name.replace("./", "tailwindcss/lib/plugins/");
                                path.replaceWith(babel.types.stringLiteral(replacement));
                            }
                            if (name === "preflight" || name === "./preflight") {
                                const rootPath = path.findParent((path) => path.parent.type === "Program");
                                rootPath === null || rootPath === void 0 ? void 0 : rootPath.remove();
                            }
                        },
                    },
                };
            },
        ],
    });
    //get path to devCorePlugins
    const devCorePluginPath = require.resolve("@tailwindcssinjs/macro/lib/devCorePlugins");
    //overwrite current devCorePlugins file with transformed code
    if (output === null || output === void 0 ? void 0 : output.code) {
        fs_1.default.writeFileSync(devCorePluginPath, output.code, "utf8");
    }
}
exports.generateDevCorePlugins = generateDevCorePlugins;
//# sourceMappingURL=devCorePluginsGenerator.js.map