"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const isEqual_1 = __importDefault(require("lodash/isEqual"));
const tailwindcssData_1 = require("@tailwindcssinjs/tailwindcss-data/lib/tailwindcssData");
const utilities_1 = require("../../tailwindcss-data/lib/utilities");
const class_composer_1 = require("@tailwindcssinjs/class-composer");
let configCache;
let tailwind;
function tailwindcssinjs(config, corePlugins) {
    if (!configCache || !isEqual_1.default(configCache, config)) {
        if (configCache)
            console.log("@tailwindcssinjs/macro - tailwind config changed");
        configCache = config;
        const { resolvedConfig, generateTwClassSubstituteRoot, utilitiesRoot, componentsRoot, } = tailwindcssData_1.tailwindData(config, corePlugins);
        const twClassDictionary = utilities_1.createTwClassDictionary(utilitiesRoot, componentsRoot);
        const twParser = class_composer_1.twClassesParser(resolvedConfig.separator);
        const twComposer = class_composer_1.twClassesComposer(resolvedConfig.separator);
        tailwind = (twClasses) => {
            var _a;
            const parsedTwClasses = twParser(twClasses);
            const composedTwClasses = twComposer(twClasses);
            const objectStyles = [];
            for (const parsedTwClass of parsedTwClasses) {
                const twRoot = generateTwClassSubstituteRoot(twClassDictionary, parsedTwClass);
                objectStyles.push(utilities_1.transformTwRootToObjectStyle(parsedTwClass[0], twRoot));
            }
            let objectStyle = utilities_1.mergeObjectStyles(objectStyles);
            if ((_a = config.tailwindcssinjs) === null || _a === void 0 ? void 0 : _a.plugins) {
                for (const plugin of config.tailwindcssinjs.plugins) {
                    objectStyle = plugin(objectStyle, composedTwClasses, resolvedConfig);
                }
            }
            return objectStyle;
        };
    }
    return tailwind;
}
exports.default = tailwindcssinjs;
//# sourceMappingURL=tailwindcssinjs.js.map