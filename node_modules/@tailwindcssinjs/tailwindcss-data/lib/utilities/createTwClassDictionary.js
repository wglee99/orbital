"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTwClassDictionary = void 0;
const postcss_1 = require("postcss");
const postcss_selector_parser_1 = __importDefault(require("postcss-selector-parser"));
function createTwClassDictionary(...roots) {
    const twClassDictionary = {};
    const combinedRoot = postcss_1.root();
    for (const twRoot of roots) {
        combinedRoot.append(twRoot.clone());
    }
    const selectorparser = postcss_selector_parser_1.default();
    const parseSelectorClasses = (rule) => {
        let selectorClasses = [];
        selectorparser.astSync(rule.selector).walkClasses((ruleClass) => {
            if (ruleClass.value)
                selectorClasses.push(ruleClass.value);
        });
        return selectorClasses;
    };
    const addNodeToTwClassDictionary = (node, twClass) => {
        if (twClassDictionary[twClass]) {
            twClassDictionary[twClass].append(node.clone());
        }
        else {
            twClassDictionary[twClass] = postcss_1.root().append(node.clone());
        }
    };
    const isMediaAtRule = (mediaAtRule) => {
        var _a;
        const selectorClassAtRules = [];
        const atRuleNode = postcss_1.atRule({
            name: mediaAtRule.name,
            params: mediaAtRule.params,
        });
        for (const $node of (_a = mediaAtRule.nodes) !== null && _a !== void 0 ? _a : []) {
            const node = $node.clone();
            if (node.type === "atrule") {
                for (const [selectorClass, nestedAtRule] of isMediaAtRule(node)) {
                    const selectorAtRuleNode = atRuleNode.clone().append(nestedAtRule);
                    selectorClassAtRules.push([selectorClass, selectorAtRuleNode]);
                }
            }
            if (node.type === "rule") {
                const [selectorClass] = parseSelectorClasses(node);
                const selectorAtRuleNode = atRuleNode.clone().append(node);
                selectorClassAtRules.push([selectorClass, selectorAtRuleNode]);
            }
        }
        return selectorClassAtRules;
    };
    combinedRoot.walk((node) => {
        if (node.type === "atrule") {
            if (node.name === "layer") {
                node.remove();
            }
            else if (node.name === "variants") {
                node.remove();
            }
            else if (node.name === "media") {
                for (const [selectorClass, atRule] of isMediaAtRule(node)) {
                    addNodeToTwClassDictionary(atRule, selectorClass);
                }
                node.removeAll();
            }
            else {
                //remove other atRules e.g. @keyframes
                node.removeAll();
            }
        }
        if (node.type === "rule") {
            const [selectorClass] = parseSelectorClasses(node);
            addNodeToTwClassDictionary(node, selectorClass);
            node.removeAll();
        }
    });
    return twClassDictionary;
}
exports.createTwClassDictionary = createTwClassDictionary;
//# sourceMappingURL=createTwClassDictionary.js.map