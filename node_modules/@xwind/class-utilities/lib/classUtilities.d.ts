export declare type TwClass = string;
export declare type TwClasses = string | TwClasses[];
export declare type TwParsedClass = {
  twClass: string;
  variants: string[];
};
export declare type TwParsedClasses = TwParsedClass | TwParsedClasses[];
/**
 * Takes a separator string (e.g. ":") as parameter and returns a composer function.
 * The composer function will return a Array of tailwind classes.
 */
export declare function composer(
  twClasses: TwClasses,
  separator: string
): string[];
/**
 * Takes a separator string (e.g. ":") as parameter and returns a composer function.
 * The composer function will return an array of class and variants tuples.
 */
export declare function parser(
  twClasses: TwClasses,
  separator: string
): TwParsedClass[];
/**
 * Takes a separator string (e.g. ":") as parameter and returns a composer function.
 * The composer function takes an array of parsed tailwind classes and return an Array of tailwind classes.
 */
export declare function generator(
  twParsedClasses: TwParsedClasses,
  separator: string
): string[];
/**
 * Takes a separator string (e.g. ":") as parameter and returns a composer function.
 * The composer function will return a tailwind classes string
 */
export declare function serializer(
  twClasses: TwClasses,
  separator: string
): string;
declare function classUtilities(
  separator: string,
  variants?: string[]
): {
  composer: (...twClasses: TwClasses[]) => string[];
  parser: (...twClasses: TwClasses[]) => TwParsedClass[];
  serializer: (...twClasses: TwClasses[]) => string;
  generator: (...twParsedClasses: TwParsedClasses[]) => string[];
};
export default classUtilities;
//# sourceMappingURL=classUtilities.d.ts.map
