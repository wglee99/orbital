"use strict";
var __createBinding =
  (this && this.__createBinding) ||
  (Object.create
    ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function () {
            return m[k];
          },
        });
      }
    : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
var __setModuleDefault =
  (this && this.__setModuleDefault) ||
  (Object.create
    ? function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      }
    : function (o, v) {
        o["default"] = v;
      });
var __importStar =
  (this && this.__importStar) ||
  function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod)
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
  };
var __exportStar =
  (this && this.__exportStar) ||
  function (m, exports) {
    for (var p in m)
      if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p))
        __createBinding(exports, m, p);
  };
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveConfig = void 0;
const postcss_1 = __importStar(require("postcss"));
//Tailwindcss imports
const resolveConfig_1 = __importDefault(require("tailwindcss/resolveConfig"));
const corePlugins_1 = __importDefault(require("tailwindcss/lib/corePlugins"));
const processPlugins_1 = __importDefault(
  require("tailwindcss/lib/util/processPlugins")
);
const substituteVariantsAtRules_1 = __importDefault(
  require("tailwindcss/lib/lib/substituteVariantsAtRules")
);
const substituteScreenAtRules_1 = __importDefault(
  require("tailwindcss/lib/lib/substituteScreenAtRules")
);
const evaluateTailwindFunctions_1 = __importDefault(
  require("tailwindcss/lib/lib/evaluateTailwindFunctions")
);
const utilities_1 = require("./utilities");
const BASEVARIANTS = [
  "DEFAULT",
  "dark",
  "motion-safe",
  "motion-reduce",
  "group-hover",
  "group-focus",
  "hover",
  "focus-within",
  "focus-visible",
  "focus",
  "active",
  "visited",
  "disabled",
  "checked",
  "first",
  "last",
  "odd",
  "even",
];
function resolveConfig(config) {
  return resolveConfig_1.default(config);
}
exports.resolveConfig = resolveConfig;
function core(resolvedConfig) {
  const processedPlugins = processPlugins_1.default(
    [...corePlugins_1.default(resolvedConfig), ...resolvedConfig.plugins],
    resolvedConfig
  );
  const baseRoot = postcss_1
    .default(evaluateTailwindFunctions_1.default(resolvedConfig))
    .process(postcss_1.root({ nodes: processedPlugins.base })).root;
  const utilitiesRoot = postcss_1.root({ nodes: processedPlugins.utilities });
  const componentsRoot = postcss_1.root({ nodes: processedPlugins.components });
  const screens = Object.keys(resolvedConfig.theme.screens);
  const variants = Object.keys(processedPlugins.variantGenerators);
  variants.unshift(...BASEVARIANTS);
  const getSubstituteVariantsAtRules = substituteVariantsAtRules_1.default(
    resolvedConfig,
    processedPlugins
  );
  const getSubstituteScreenAtRules = substituteScreenAtRules_1.default(
    resolvedConfig
  );
  const generateTwClassSubstituteRoot = utilities_1.getGenerateTwClassSubstituteRoot(
    screens,
    resolvedConfig.separator,
    getSubstituteScreenAtRules,
    getSubstituteVariantsAtRules
  );
  return {
    baseRoot,
    utilitiesRoot,
    componentsRoot,
    processedPlugins,
    resolvedConfig,
    screens,
    variants,
    getSubstituteScreenAtRules,
    getSubstituteVariantsAtRules,
    generateTwClassSubstituteRoot,
  };
}
exports.default = core;
__exportStar(require("./utilities"), exports);
//# sourceMappingURL=core.js.map
