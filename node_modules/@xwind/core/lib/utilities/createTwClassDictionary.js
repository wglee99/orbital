"use strict";
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, "__esModule", { value: true });
exports.flattenContainer = exports.createTwClassDictionary = void 0;
const postcss_1 = require("postcss");
const postcss_selector_parser_1 = __importDefault(
  require("postcss-selector-parser")
);
const XWIND_GLOBAL = "XWIND_GLOBAL";
function createTwClassDictionary(...roots) {
  const twClassDictionary = {
    [XWIND_GLOBAL]: postcss_1.root(),
  };
  const addNodeToTwClassDictionary = (node) => {
    var _a;
    const twClass =
      (_a = node.twClass) !== null && _a !== void 0 ? _a : XWIND_GLOBAL;
    if (twClassDictionary[twClass]) {
      twClassDictionary[twClass].append(node.clone());
    } else {
      twClassDictionary[twClass] = postcss_1.root().append(node.clone());
      twClassDictionary[twClass].twClass = twClass;
    }
  };
  const combinedRoot = postcss_1.root();
  for (const twRoot of roots) {
    combinedRoot.append(twRoot.clone());
  }
  flattenContainer(combinedRoot);
  for (const node of combinedRoot.nodes) {
    addNodeToTwClassDictionary(node);
  }
  return twClassDictionary;
}
exports.createTwClassDictionary = createTwClassDictionary;
function flattenContainer(container) {
  const selectorparser = postcss_selector_parser_1.default();
  const parseSelectorClasses = (rule) => {
    let selectorClasses = [];
    selectorparser.astSync(rule.selector).walkClasses((ruleClass) => {
      if (ruleClass.value) selectorClasses.push(ruleClass.value);
    });
    return Array.from(new Set(selectorClasses));
  };
  const walker = (node) => {
    var _a, _b, _c, _d;
    if (node === null || node === void 0 ? void 0 : node.twClass) {
      return;
    }
    if (node.type === "atrule") {
      if (node.name === "layer") {
        (_a = node.parent) === null || _a === void 0
          ? void 0
          : _a.append(node.nodes);
        node.removeAll();
        node.remove();
      } else if (node.name === "variants") {
        (_b = node.parent) === null || _b === void 0
          ? void 0
          : _b.append(node.nodes);
        node.removeAll();
        node.remove();
      } else if (node.name === "media") {
        node.walk(walker);
        const nodes = node.nodes;
        for (const atRulenode of nodes) {
          const newAtrule = postcss_1.atRule({
            name: node.name,
            nodes: [atRulenode],
            params: node.params,
            raws: node.raws,
            source: node.source,
          });
          newAtrule.twClass = atRulenode.twClass;
          (_c = node.parent) === null || _c === void 0
            ? void 0
            : _c.append(newAtrule);
        }
        node.removeAll();
        node.remove();
      }
    } else if (node.type === "rule") {
      const selectorClasses = parseSelectorClasses(node);
      // is Single Class Selector
      if (selectorClasses.length === 1) {
        node.twClass = selectorClasses[0];
      }
      // is Multi Classes Selector
      if (selectorClasses.length > 1) {
        const isClassInSelector = (selector, twClass) => {
          let isInSelector = false;
          selectorparser.astSync(selector).walkClasses((selectorClass) => {
            if (selectorClass.value === twClass) isInSelector = true;
          });
          return isInSelector;
        };
        for (const selectorClass of selectorClasses) {
          const selectors = node.selectors.filter((selector) =>
            isClassInSelector(selector, selectorClass)
          );
          const newRule = postcss_1.rule({
            nodes: node.nodes,
            raws: node.raws,
            selectors,
            source: node.source,
          });
          newRule.twClass = selectorClass;
          (_d = node.parent) === null || _d === void 0
            ? void 0
            : _d.append(newRule);
        }
        node.removeAll();
        node.remove();
      }
    }
  };
  container.walk(walker);
}
exports.flattenContainer = flattenContainer;
//# sourceMappingURL=createTwClassDictionary.js.map
