"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGenerateTwClassSubstituteRoot = void 0;
const postcss_1 = require("postcss");
const postcss_selector_parser_1 = __importDefault(require("postcss-selector-parser"));
function getGenerateTwClassSubstituteRoot(screens, separator, getSubstituteScreenAtRules, getSubstituteVariantsAtRules) {
    const applySubstituteRules = (variant, twRoot, getSubstituteRules) => {
        if (!twRoot.nodes) {
            throw new Error("Root has no nodes");
        }
        const atRuleNode = postcss_1.atRule(variant).append(twRoot.nodes);
        twRoot.removeAll().append(atRuleNode);
        getSubstituteRules(twRoot);
    };
    const selectorparser = postcss_selector_parser_1.default();
    const parseSelectorClasses = (rule, twClass, variant) => {
        const selectorRoot = selectorparser.astSync(rule.selector);
        selectorRoot.walkClasses((ruleClass) => {
            if (ruleClass.value === twClass ||
                ruleClass.value.includes(`${separator}${twClass}`)) {
                ruleClass.value = `${variant}${separator}${ruleClass.value}`;
            }
        });
        return selectorRoot.toString();
    };
    return (twClassDictionary, twParsedClass) => {
        var _a;
        const { twClass, variants } = twParsedClass;
        const twObject = twClassDictionary[twClass];
        if (!twObject)
            throw new Error(`Class "${twClass}" not found.`);
        const twRoot = twObject.clone();
        for (const variant of variants) {
            if (screens.includes(variant)) {
                const atRuleProps = {
                    name: "screen",
                    params: variant,
                };
                applySubstituteRules(atRuleProps, twRoot, getSubstituteScreenAtRules);
                twRoot.walkRules((rule) => {
                    rule.selector = parseSelectorClasses(rule, twClass, variant);
                });
            }
            else {
                const atRuleProps = {
                    name: "variants",
                    params: variant,
                };
                applySubstituteRules(atRuleProps, twRoot, getSubstituteVariantsAtRules);
                (_a = twRoot.first) === null || _a === void 0 ? void 0 : _a.remove();
            }
        }
        return twRoot;
    };
}
exports.getGenerateTwClassSubstituteRoot = getGenerateTwClassSubstituteRoot;
//# sourceMappingURL=getGenerateTwClassSubstituteRoot.js.map