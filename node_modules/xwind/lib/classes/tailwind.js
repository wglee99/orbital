"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = __importStar(require("@xwind/core"));
const class_utilities_1 = __importDefault(require("@xwind/class-utilities"));
function tailwind(tailwindConfig, includeBase) {
    const { resolvedConfig, utilitiesRoot, componentsRoot, baseRoot, screens, variants, generateTwClassSubstituteRoot, } = core_1.default(tailwindConfig);
    const twClassDictionary = {
        XWIND_BASE: core_1.createTwClassDictionary(baseRoot).XWIND_GLOBAL,
        ...core_1.createTwClassDictionary(componentsRoot, utilitiesRoot),
    };
    const variantOrder = tailwindConfig.variantOrder;
    const twClassOrder = Object.keys(twClassDictionary);
    const compare = ({ twClass: firstClass, variants: firstVariants }, { twClass: secondClass, variants: secondVariants }) => {
        //compare screen variants
        const firstScreenIndex = firstVariants.length
            ? screens.indexOf(firstVariants[firstVariants.length - 1])
            : -1;
        const secondScreenIndex = secondVariants.length
            ? screens.indexOf(secondVariants[secondVariants.length - 1])
            : -1;
        if (firstScreenIndex !== -1 || secondScreenIndex !== -1) {
            if (firstScreenIndex < secondScreenIndex)
                return -1;
            if (firstScreenIndex > secondScreenIndex)
                return 1;
        }
        //compare classes
        const firstClassIndex = twClassOrder.indexOf(firstClass);
        const secondClassIndex = twClassOrder.indexOf(secondClass);
        if (firstClassIndex < secondClassIndex)
            return -1;
        if (firstClassIndex > secondClassIndex)
            return 1;
        //compare variants
        const firstVariantsIndex = variantOrder.indexOf(firstVariants[0]);
        const secondVariantsIndex = variantOrder.indexOf(secondVariants[0]);
        if (firstVariantsIndex !== -1 || secondVariantsIndex !== -1) {
            if (firstVariantsIndex < secondVariantsIndex)
                return -1;
            if (firstVariantsIndex > secondVariantsIndex)
                return 1;
        }
        return 0;
    };
    const twClassesUtils = class_utilities_1.default(resolvedConfig.separator, [
        ...screens,
        ...variants,
    ]);
    const generatedTwClassesCSS = {};
    return (twClasses) => {
        const sortedTwClasses = twClassesUtils
            .parser(includeBase ? "XWIND_BASE XWIND_GLOBAL" : "XWIND_GLOBAL", twClasses)
            .sort(compare);
        const combinedRoot = [];
        for (const twClass of sortedTwClasses) {
            const [generatedTwClass] = twClassesUtils.generator(twClass);
            let generatedTwClassCSS = generatedTwClassesCSS[generatedTwClass];
            if (!generatedTwClassCSS) {
                generatedTwClassCSS = generateTwClassSubstituteRoot(twClassDictionary, twClass).toString();
                generatedTwClassesCSS[generatedTwClass] = generatedTwClassCSS;
            }
            combinedRoot.push(generatedTwClassCSS);
        }
        const preText = "/*! Generated with xwind | https://github.com/arthie/xwind */";
        return [preText, ...combinedRoot].join("\n");
    };
}
exports.default = tailwind;
//# sourceMappingURL=tailwind.js.map