import { Objectstyle, ResolvedTailwindConfig } from "@xwind/core";
interface ClassesModeOptions {
    mode: "classes";
    classes: {
        includeBase?: boolean;
        entry: string | string[];
        output: string;
    };
}
interface ResolvedClassesModeOptions {
    mode: "classes";
    classes: {
        includeBase: boolean;
        entry: string | string[];
        output: string;
    };
}
interface ObjectstylesModeOptions {
    mode: "objectstyles";
    objectstyles?: {
        plugins?: Array<(objectStyle: Objectstyle, composedTwClasses: string[], resolvedConfig: ResolvedTailwindConfig) => {}>;
    };
}
export declare type XwindConfigOptions = ClassesModeOptions | ObjectstylesModeOptions;
export interface ResolvedXwindTailwindConfig extends ResolvedTailwindConfig {
    xwind?: XwindConfigOptions;
}
export declare function resolveXwindConfig(configPath: string, config: ResolvedXwindTailwindConfig): XwindConfigOptions;
export declare function resolveXwindClassesModeConfig(configPath: string, config: ResolvedXwindTailwindConfig): ResolvedClassesModeOptions;
export declare function resolveXwindObjectstylesModeConfig(configPath: string, config: ResolvedXwindTailwindConfig): ObjectstylesModeOptions;
export declare function getMode(config: ResolvedXwindTailwindConfig): "classes" | "objectstyles";
export {};
//# sourceMappingURL=xwindConfig.d.ts.map