"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMode = exports.resolveXwindObjectstylesModeConfig = exports.resolveXwindClassesModeConfig = exports.resolveXwindConfig = void 0;
//TODO: add type checking
function resolveXwindConfig(configPath, config) {
  if (!config.xwind) {
    throw new Error(`
    XWIND: No xwind config object found.
    Please add an xwind config object to the "${configPath}" file.
      
      Example:
      //tailwind.config.js
      module.exports = {
        // ... tailwind config options
        xwind: {
          // ... xwind config options
        }
      }
    `);
  }
  const { mode } = config.xwind;
  if (!mode) {
    throw new Error(`
    XWIND: No mode option found in xwind config.
    Please add a mode option to the xwind config object in the "${configPath}" file.
      
      
      Example:
      //tailwind.config.js
      module.exports = {
        // ... tailwind config options
        xwind: {
          mode: "XWIND_MODE" // xwind modes: "classes" or "objectstyles"
          // ... xwind config options
        }
      }
    `);
  }
  if (mode !== "classes" && mode !== "objectstyles")
    throw new Error(`
    XWIND: Mode has been set to "${mode}".
    Please change the mode option from the xwind config object in the "${configPath}" file to "classes" or "objectstyles".
    
      Example:
      //tailwind.config.js
      module.exports = {
        // ... tailwind config options
        xwind: {
          mode: "classes" //or "objectstyles"
          // ... xwind config options
        }
      }
    `);
  if (config.xwind.mode === "classes") {
    if (!config.xwind.classes) {
      throw new Error(`XWIND:"No classes option found in xwind options"`);
    }
    const { includeBase, entry, output } = config.xwind.classes;
    if (!entry) {
      throw new Error(`
      XWIND: No entry option found in xwind config classes property.
      Please add a entry option to the classes property from the xwind config object in the "${configPath}" file.

        Example:
        //tailwind.config.js
        module.exports = {
          // ... tailwind config options
          xwind: {
            mode: "classes",
            classes: {
              entry: "./src" //string or string[]
              // ... xwind classes options
            }
            // ... xwind options
          }
        }
      `);
    }
    if (!output) {
      throw new Error(`
      XWIND: No output option found in xwind config classes property.
      Please add a output option to the classes property from the xwind config object in the "${configPath}" file.
        Example:
        //tailwind.config.js
        module.exports = {
          // ... tailwind config options
          xwind: {
            mode: "classes",
            classes: {
              output: "./src/styles/xwind.css"
              // ... xwind classes options
            }
            // ... xwind options
          }
        }
      `);
    }
  }
  return config.xwind;
}
exports.resolveXwindConfig = resolveXwindConfig;
function resolveXwindClassesModeConfig(configPath, config) {
  var _a;
  const xwindConfig = resolveXwindConfig(configPath, config);
  if (xwindConfig.mode !== "classes") {
    throw new Error(`
    XWIND: Mode has been set to "${xwindConfig.mode}".
    Please change the mode option from the xwind config object in the "${configPath}" file to "classes"
    
      Example:
      //tailwind.config.js
      module.exports = {
        // ... tailwind config options
        xwind: {
          mode: "classes"
          // ... xwind config options
        }
      }
    `);
  }
  if (typeof xwindConfig.classes.includeBase === "undefined") {
    xwindConfig.classes.includeBase = true;
  }
  return {
    mode: "classes",
    classes: {
      includeBase:
        (_a = xwindConfig.classes.includeBase) !== null && _a !== void 0
          ? _a
          : true,
      entry: xwindConfig.classes.entry,
      output: xwindConfig.classes.output,
    },
  };
}
exports.resolveXwindClassesModeConfig = resolveXwindClassesModeConfig;
function resolveXwindObjectstylesModeConfig(configPath, config) {
  const xwindConfig = resolveXwindConfig(configPath, config);
  if (xwindConfig.mode !== "objectstyles") {
    throw new Error(
      `XWIND: Mode has been set to "${xwindConfig.mode}". Please change the mode option from the xwind config object in the "${configPath}" file to "objectstyles"`
    );
  }
  return xwindConfig;
}
exports.resolveXwindObjectstylesModeConfig = resolveXwindObjectstylesModeConfig;
function getMode(config) {
  if (config.xwind && config.xwind.mode === "classes") {
    return "classes";
  }
  return "objectstyles";
}
exports.getMode = getMode;
//# sourceMappingURL=xwindConfig.js.map
